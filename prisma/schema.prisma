generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                 @id @default(autoincrement())
  email                     String              @unique
  fullname                  String?
  imgUrl                    String?             @map("img_url")
  password                  String
  createdAt                 DateTime            @default(now()) @map("created_at")
  updatedAt                 DateTime            @default(now()) @updatedAt @map("updated_at")
  faculty                   String?
  isAdmin                   Boolean             @default(false) @map("is_admin")
  batch                     Int                 @default(2024)
  AttendanceRecord          AttendanceRecord[]
  NetworkingTaskSender      NetworkingTask[]    @relation("from")
  NetworkingTaskReciever    NetworkingTask[]    @relation("to")
  ConnectionRequestSender   ConnectionRequest[] @relation("from")
  ConnectionRequestReciever ConnectionRequest[] @relation("to")
  ConnectionSender          Connection[]        @relation("from")
  ConnectionReciever        Connection[]        @relation("to")
  Quotes                    Quotes[]

  @@map("users")
}

model Connection {
  id         Int      @id @default(autoincrement())
  from       User     @relation(fields: [fromId], references: [id], name: "from")
  fromId     Int      @map("from_id")
  to         User     @relation(fields: [toId], references: [id], name: "to")
  toId       Int      @map("to_id")
  status     String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("connections")
}

model ConnectionRequest {
  id         Int      @id @default(autoincrement())
  from       User     @relation(fields: [fromId], references: [id], name: "from")
  fromId     Int      @map("from_id")
  to         User     @relation(fields: [toId], references: [id], name: "to")
  toId       Int      @map("to_id")
  status     String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("connection_requests")
}

model Attendance {
  id               Int                @id @default(autoincrement())
  name             String             @default("Attendance")
  code             String
  expires_in       Int
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @updatedAt
  AttendanceRecord AttendanceRecord[]

  @@map("attendances")
}

model AttendanceRecord {
  user         User       @relation(fields: [userId], references: [id])
  userId       Int        @map("user_id")
  attendance   Attendance @relation(fields: [attendanceId], references: [id])
  attendanceId Int        @map("attendance_id")

  @@id([userId, attendanceId])
  @@map("attendance_records")
}

model Question {
  id           Int            @id @default(autoincrement())
  question     String
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt
  is_mandatory Boolean        @default(false) @map("is_mandatory")
  tasks        QuestionTask[]

  @@map("questions")
}

model QuestionTask {
  question   Question       @relation(fields: [questionId], references: [id])
  questionId Int            @map("question_id")
  task       NetworkingTask @relation(fields: [fromId, toId], references: [fromId, toId])
  fromId     Int            @map("from_id")
  toId       Int            @map("to_id")
  answer     String?

  @@id([questionId, fromId, toId])
}

model NetworkingTask {
  from      User           @relation(fields: [fromId], references: [id], name: "from")
  fromId    Int            @map("from_id")
  to        User           @relation(fields: [toId], references: [id], name: "to")
  toId      Int            @map("to_id")
  questions QuestionTask[]
  is_done   Boolean        @default(false) @map("is_done")

  @@id([fromId, toId])
}

model Quotes {
  id         Int      @id @default(autoincrement())
  quote      String
  user       User     @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  userId     Int

  @@map("quotes")
}
