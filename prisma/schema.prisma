generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"] 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int                             @id @default(autoincrement())
  email                         String                          @unique
  fullname                      String?
  imgUrl                        String?                         @map("img_url")
  password                      String
  createdAt                     DateTime                        @default(now()) @map("created_at")
  updatedAt                     DateTime                        @default(now()) @updatedAt @map("updated_at")
  faculty                       String?
  isAdmin                       Boolean                         @default(false) @map("is_admin")
  batch                         Int                             @default(2025)
  AttendanceRecord              AttendanceRecord[]
  NetworkingTaskSender          NetworkingTask[]                @relation("from")
  NetworkingTaskReciever        NetworkingTask[]                @relation("to")
  NetworkingKatingTaskSender    NetworkingKatingTask[]          @relation("from")
  NetworkingKatingTaskReceiver  NetworkingKatingTask[]          @relation("to")
  ConnectionRequestSender       ConnectionRequest[]             @relation("from")
  ConnectionRequestReciever     ConnectionRequest[]             @relation("to")
  ConnectionSender              Connection[]                    @relation("from")
  ConnectionReciever            Connection[]                    @relation("to")
  Quotes                        Quotes[]
  ConnectSubmission             ConnectSubmission[]
  FirstFossibSessionSubmission  FirstFossibSessionSubmission[]
  SecondFossibSessionSubmission SecondFossibSessionSubmission[]
  InsightHuntingSubmission      InsightHuntingSubmission[]
  ExplorerSubmission            ExplorerSubmission[]
  MentoringVlogSubmission       MentoringVlogSubmission[]
  MentoringReflection           MentoringReflection[]
  NetworkingScore               NetworkingScore[]

  @@map("users")
}

model NetworkingScore {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
  score  Int

  @@map("networking_scores")
}

model Connection {
  id         Int      @id @default(autoincrement())
  from       User     @relation(fields: [fromId], references: [id], name: "from")
  fromId     Int      @map("from_id")
  to         User     @relation(fields: [toId], references: [id], name: "to")
  toId       Int      @map("to_id")
  status     String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("connections")
}

model ConnectionRequest {
  id         Int      @id @default(autoincrement())
  from       User     @relation(fields: [fromId], references: [id], name: "from")
  fromId     Int      @map("from_id")
  to         User     @relation(fields: [toId], references: [id], name: "to")
  toId       Int      @map("to_id")
  status     String
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("connection_requests")
}

model Attendance {
  id               Int                @id @default(autoincrement())
  name             String             @default("Attendance")
  code             String
  expires_in       Int
  created_at       DateTime           @default(now())
  started_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @updatedAt
  AttendanceRecord AttendanceRecord[]

  @@map("attendances")
}

model AttendanceRecord {
  user         User       @relation(fields: [userId], references: [id])
  userId       Int        @map("user_id")
  attendance   Attendance @relation(fields: [attendanceId], references: [id])
  attendanceId Int        @map("attendance_id")
  q1           Int        @default(0)
  q2           Int        @default(0)
  q3           Int        @default(0)
  q4           Int        @default(0)
  q5           Int        @default(0)

  @@id([userId, attendanceId])
  @@map("attendance_records")
}

model Question {
  id           Int            @id @default(autoincrement())
  question     String
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt
  group_id     Int            @default(1)
  tasks        QuestionTask[]

  @@map("questions")
}

model QuestionTask {
  question   Question       @relation(fields: [questionId], references: [id])
  questionId Int            @map("question_id")
  task       NetworkingTask @relation(fields: [fromId, toId], references: [fromId, toId])
  fromId     Int            @map("from_id")
  toId       Int            @map("to_id")
  answer     String?

  @@id([questionId, fromId, toId])
}

model NetworkingTask {
  from      User           @relation(fields: [fromId], references: [id], name: "from")
  fromId    Int            @map("from_id")
  to        User           @relation(fields: [toId], references: [id], name: "to")
  toId      Int            @map("to_id")
  img_url   String?
  questions QuestionTask[]
  is_done   Boolean        @default(false) @map("is_done")
  score     Int            @default(0) 

  @@id([fromId, toId])
}

model QuestionKating{
  id           Int            @id @default(autoincrement())
  question     String
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt
  group_id     Int            @default(1)
  tasks        QuestionKatingTask[]

  @@map("questions_kating")
}

model QuestionKatingTask {
  question   QuestionKating       @relation(fields: [questionId], references: [id])
  questionId Int            @map("question_id")
  task       NetworkingKatingTask @relation(fields: [fromId, toId], references: [fromId, toId])
  fromId     Int            @map("from_id")
  toId       Int            @map("to_id")
  answer     String?

  @@id([questionId, fromId, toId])
}

model NetworkingKatingTask {
  from      User           @relation(fields: [fromId], references: [id], name: "from")
  fromId    Int            @map("from_id")
  to        User           @relation(fields: [toId], references: [id], name: "to")
  toId      Int            @map("to_id")
  img_url   String?
  questions QuestionKatingTask[]
  is_done   Boolean        @default(false) @map("is_done")
  score     Int            @default(0) 

  @@id([fromId, toId])
}

model NetworkingTaskScore {
  fromId Int @map("from_id")
  toId   Int @map("to_id")
  score  Int

  @@id([fromId, toId])
}

model Quotes {
  id         Int      @id @default(autoincrement())
  quote      String
  user       User     @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  userId     Int

  @@map("quotes")
}

model ConnectSubmission {
  id          Int     @id @default(autoincrement())
  batch       Int
  user        User    @relation(fields: [userId], references: [id])
  file_url    String  @map("file_url")
  description String?
  userId      Int
}

model FirstFossibSessionSubmission {
  id                      Int                       @id @default(autoincrement())
  user                    User                      @relation(fields: [userId], references: [id])
  file_url                String                    @map("file_url")
  description             String
  userId                  Int
  FirstFossibSessionScore FirstFossibSessionScore[]
}

model FirstFossibSessionScore {
  id           Int                          @id @default(autoincrement())
  submission   FirstFossibSessionSubmission @relation(fields: [submissionId], references: [id])
  submissionId Int                          @map("submission_id")
  score        Int
}

model SecondFossibSessionSubmission {
  id                       Int                        @id @default(autoincrement())
  user                     User                       @relation(fields: [userId], references: [id])
  file_url                 String                     @map("file_url")
  description              String
  userId                   Int
  SecondFossibSessionScore SecondFossibSessionScore[]
}

model SecondFossibSessionScore {
  id           Int                           @id @default(autoincrement())
  submission   SecondFossibSessionSubmission @relation(fields: [submissionId], references: [id])
  submissionId Int                           @map("submission_id")
  score        Int
}

model InsightHuntingSubmission {
  id                            Int                             @id @default(autoincrement())
  user                          User                            @relation(fields: [userId], references: [id])
  file_url                      String                          @map("file_url")
  userId                        Int
  InsightHuntingSubmissionScore InsightHuntingSubmissionScore[]
}

model InsightHuntingSubmissionScore {
  id           Int                      @id @default(autoincrement())
  submission   InsightHuntingSubmission @relation(fields: [submissionId], references: [id])
  submissionId Int                      @map("submission_id")
  score        Int
}

model ExplorerSubmission {
  id                      Int                       @id @default(autoincrement())
  user                    User                      @relation(fields: [userId], references: [id])
  img_url                 String                    @map("img_url")
  userId                  Int
  ExplorerSubmissionScore ExplorerSubmissionScore[]
}

model ExplorerSubmissionScore {
  id           Int                @id @default(autoincrement())
  submission   ExplorerSubmission @relation(fields: [submissionId], references: [id])
  submissionId Int                @map("submission_id")
  score        Int
}

model MentoringReflection {
  id                       Int                        @id @default(autoincrement())
  user                     User                       @relation(fields: [userId], references: [id])
  file_url                 String                     @map("file_url")
  description              String
  userId                   Int
  MentoringReflectionScore MentoringReflectionScore[]
}

model MentoringReflectionScore {
  id           Int                 @id @default(autoincrement())
  reflection   MentoringReflection @relation(fields: [reflectionId], references: [id])
  reflectionId Int                 @map("reflection_id")
  score        Int
}

model MentoringVlogSubmission {
  id                           Int                            @id @default(autoincrement())
  user                         User                           @relation(fields: [userId], references: [id])
  file_url                     String                         @map("file_url")
  userId                       Int
  MentoringVlogSubmissionScore MentoringVlogSubmissionScore[]
}

model MentoringVlogSubmissionScore {
  id           Int                     @id @default(autoincrement())
  submission   MentoringVlogSubmission @relation(fields: [submissionId], references: [id])
  submissionId Int                     @map("submission_id")
  score        Int
}
